import { By, WebDriver } from 'selenium-webdriver';
import DriverSetup from '../config/driver-setup';
import urls from '../data/urls';

export default class LoginPage {
  private driver: WebDriver;

  private usernameInput = By.id("user-name");
  private passwordInput = By.id("password");
  private loginButton = By.id('login-button');
  private errorMessage = By.className("error-message-container error");

  constructor() {
    this.driver = DriverSetup.getInstance().getDriver();
  }

  async enterUsername(username: string): Promise<void> {
    await this.driver.findElement(this.usernameInput).sendKeys(username);
  }

  async enterPassword(password: string): Promise<void> {
    await this.driver.findElement(this.passwordInput).sendKeys(password);
  }

  async clickLoginButton(): Promise<void> {
    await this.driver.findElement(this.loginButton).click();
  }

  async isButtonDisplayed(): Promise<boolean> {
    const loginButtonState: boolean = await this.driver.findElement(this.loginButton).isDisplayed();
    return loginButtonState;
  }
}





import DriverSetup from "../../core/config/driver-setup";
import urls from "../../core/data/urls";
import invalid_user from "../../core/data/invalid_user.json";
import LoginPage from "../../core/page-objects/login-page";

let loginPage: LoginPage;

const driverInstance = DriverSetup.getInstance();

describe("Testing login using invalid data", () => {
  beforeAll(async () => {
    loginPage = new LoginPage();
    driverInstance.openURL(urls.sauceLabsURL);
  });

  it("Checking logging in with invalid username and password", async () => {
    await loginPage.checkIsLoginPage();
    await loginPage.enterUsername(invalid_user.credentials.username);
    await loginPage.enterPassword(invalid_user.credentials.password);
    await loginPage.clickLoginButton();
    await loginPage.validateMessageDisplayed();
    await loginPage.checkIsLoginPage();
  }, 10000);

  afterAll(async () => {
    driverInstance.turnOffDriver();
  });
});



